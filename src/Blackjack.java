// Blackjack.java
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

/**
 * Class Blackjack - Engine ch√≠nh c·ªßa game Blackjack
 * Ch·ª©a to√†n b·ªô logic game, qu·∫£n l√Ω tr·∫°ng th√°i v√† x·ª≠ l√Ω lu·∫≠t ch∆°i
 * H·ªó tr·ª£ multiplayer (1-3 ng∆∞·ªùi ch∆°i) v·ªõi h·ªá th·ªëng c∆∞·ª£c ti·ªÅn
 */
public class Blackjack implements Serializable {
    private static final long serialVersionUID = 2L;

    ArrayList<Card> deck;
    Random random = new Random();

    // Dealer
    ArrayList<Card> dealerHand;
    int dealerSum;
    int dealerAceCount;

    // Qu·∫£n l√Ω nhi·ªÅu ng∆∞·ªùi ch∆°i
    private final int numberOfPlayers;
    List<ArrayList<Card>> playersHands;
    List<Integer> playersSums;
    List<Integer> playersAceCounts;
    List<String> playersResults;
    
    // TH√äM: H·ªá th·ªëng c∆∞·ª£c ti·ªÅn
    List<Integer> playersMoneys;   // S·ªë ti·ªÅn c·ªßa m·ªói ng∆∞·ªùi
    List<Integer> playersBets;     // S·ªë ti·ªÅn c∆∞·ª£c trong v√°n n√†y
    private static final int STARTING_MONEY = 1000; // Ti·ªÅn kh·ªüi t·∫°o
    
    private int currentPlayerIndex;

    public enum GameState {
        WAITING_FOR_PLAYERS,
        BETTING,           
        DEALING,
        PLAYER_TURN,
        DEALER_TURN,
        GAME_OVER
    }
    private GameState currentGameState;

    /**
     * Constructor - Kh·ªüi t·∫°o game Blackjack v·ªõi s·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i x√°c ƒë·ªãnh
     * @param numberOfPlayers S·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i (1-3 ng∆∞·ªùi)
     * Ch·ª©c nƒÉng:
     * - Kh·ªüi t·∫°o danh s√°ch l√° b√†i, ƒëi·ªÉm s·ªë, ti·ªÅn c∆∞·ª£c cho m·ªói ng∆∞·ªùi ch∆°i
     * - T·∫°o b·ªô b√†i v√† x√°o tr·ªôn
     * - C·∫•p ti·ªÅn ban ƒë·∫ßu cho m·ªói ng∆∞·ªùi ch∆°i (1000 ƒë·ªìng)
     * - ƒê·∫∑t tr·∫°ng th√°i game l√† ch·ªù ng∆∞·ªùi ch∆°i
     */
    public Blackjack(int numberOfPlayers) {
        this.numberOfPlayers = numberOfPlayers;
        this.playersHands = new ArrayList<>();
        this.playersSums = new ArrayList<>();
        this.playersAceCounts = new ArrayList<>();
        this.playersResults = new ArrayList<>();
        this.playersMoneys = new ArrayList<>();
        this.playersBets = new ArrayList<>();
        
        // Kh·ªüi t·∫°o d·ªØ li·ªáu cho s·ªë ng∆∞·ªùi ch∆°i
        for (int i = 0; i < numberOfPlayers; i++) {
            playersHands.add(new ArrayList<>());
            playersSums.add(0);
            playersAceCounts.add(0);
            playersResults.add("");
            playersMoneys.add(STARTING_MONEY); // M·ªói ng∆∞·ªùi b·∫Øt ƒë·∫ßu v·ªõi 1000$
            playersBets.add(0);
        }

        dealerHand = new ArrayList<>();
        dealerSum = 0;
        dealerAceCount = 0;
        currentPlayerIndex = 0;
        currentGameState = GameState.WAITING_FOR_PLAYERS;

        buildDeck();
        shuffleDeck();
    }

    /**
     * B·∫Øt ƒë·∫ßu v√°n b√†i m·ªõi
     * Ch·ª©c nƒÉng:
     * - Reset t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ v√°n tr∆∞·ªõc (l√° b√†i, ƒëi·ªÉm s·ªë, k·∫øt qu·∫£)
     * - T·∫°o b·ªô b√†i m·ªõi v√† x√°o tr·ªôn
     * - ƒê·∫∑t tr·∫°ng th√°i game sang ch·∫ø ƒë·ªô c∆∞·ª£c ti·ªÅn
     * - Chu·∫©n b·ªã cho ng∆∞·ªùi ch∆°i ƒë·∫∑t c∆∞·ª£c
     */
    public void startGame() {
        // Reset cho v√°n m·ªõi
        for (int i = 0; i < numberOfPlayers; i++) {
            playersHands.get(i).clear();
            playersSums.set(i, 0);
            playersAceCounts.set(i, 0);
            playersResults.set(i, "");
            playersBets.set(i, 0); // Reset c∆∞·ª£c
        }

        dealerHand.clear();
        dealerSum = 0;
        dealerAceCount = 0;
        currentPlayerIndex = 0;

        // TH√äM: Reset b·ªô b√†i m·ªõi cho v√°n m·ªõi ƒë·ªÉ tr√°nh h·∫øt b√†i
        buildDeck();
        shuffleDeck();
        System.out.println("üÉè ƒê√£ t·∫°o b·ªô b√†i m·ªõi v·ªõi " + deck.size() + " l√° b√†i");

        // Chuy·ªÉn sang tr·∫°ng th√°i ƒë·∫∑t c∆∞·ª£c
        currentGameState = GameState.BETTING;
        System.out.println("Game b·∫Øt ƒë·∫ßu! Tr·∫°ng th√°i: BETTING");
    }

    // TH√äM: Ph∆∞∆°ng th·ª©c ƒë·∫∑t c∆∞·ª£c
    public boolean placeBet(int playerId, int betAmount) {
        if (currentGameState != GameState.BETTING) {
            return false;
        }
        
        if (playerId < 0 || playerId >= numberOfPlayers) {
            return false;
        }
        
        int playerMoney = playersMoneys.get(playerId);
        if (betAmount <= 0 || betAmount > playerMoney) {
            return false;
        }
        
        // ƒê·∫∑t c∆∞·ª£c
        playersBets.set(playerId, betAmount);
        playersMoneys.set(playerId, playerMoney - betAmount);
        
        System.out.println("Player " + playerId + " ƒë√£ c∆∞·ª£c " + betAmount + "$");
        
        // Ki·ªÉm tra xem t·∫•t c·∫£ ng∆∞·ªùi ch∆°i ƒë√£ ƒë·∫∑t c∆∞·ª£c ch∆∞a
        boolean allPlayersBet = true;
        for (int i = 0; i < numberOfPlayers; i++) {
            if (playersBets.get(i) == 0) {
                allPlayersBet = false;
                break;
            }
        }
        
        if (allPlayersBet) {
            // Chuy·ªÉn sang chia b√†i
            currentGameState = GameState.DEALING;
            dealInitialCards();
        }
        
        return true;
    }

    // TH√äM: Chia b√†i ban ƒë·∫ßu
    private void dealInitialCards() {
        // Chia 2 l√° cho m·ªói ng∆∞·ªùi ch∆°i v√† dealer
        for (int round = 0; round < 2; round++) {
            // Chia cho ng∆∞·ªùi ch∆°i tr∆∞·ªõc
            for (int i = 0; i < numberOfPlayers; i++) {
                Card card = deck.remove(deck.size() - 1);
                playersHands.get(i).add(card);
                playersSums.set(i, playersSums.get(i) + card.getValue());
                if (card.isAce()) {
                    playersAceCounts.set(i, playersAceCounts.get(i) + 1);
                }
            }
            
            // Chia cho dealer
            Card dealerCard = deck.remove(deck.size() - 1);
            dealerHand.add(dealerCard);
            
            // Ch·ªâ t√≠nh ƒëi·ªÉm cho l√° th·ª© 2 c·ªßa dealer (l√° ƒë·∫ßu ·∫©n)
            if (round == 1) {
                dealerSum += dealerCard.getValue();
                if (dealerCard.isAce()) {
                    dealerAceCount++;
                }
            }
        }
        
        // T√≠nh ƒëi·ªÉm ch√≠nh x√°c cho t·∫•t c·∫£ players t·ª´ ƒë·∫ßu
        for (int i = 0; i < numberOfPlayers; i++) {
            int totalSum = 0;
            int aceCount = 0;
            
            // T√≠nh t·ªïng ƒëi·ªÉm th√¥ t·ª´ t·∫•t c·∫£ l√° b√†i
            for (Card c : playersHands.get(i)) {
                totalSum += c.getValue();
                if (c.isAce()) {
                    aceCount++;
                }
            }
            
            // √Åp d·ª•ng logic A t·ªëi ∆∞u v√† c·∫≠p nh·∫≠t
            int optimizedSum = calculateOptimalScore(totalSum, aceCount);
            playersSums.set(i, optimizedSum);
            playersAceCounts.set(i, aceCount);
        }
        
        // Ki·ªÉm tra Blackjack t·ª± nhi√™n
        checkNaturalBlackjacks();
        
        // N·∫øu kh√¥ng c√≥ ai c√≥ Blackjack, b·∫Øt ƒë·∫ßu l∆∞·ª£t ch∆°i
        if (currentGameState == GameState.DEALING) {
            currentGameState = GameState.PLAYER_TURN;
            currentPlayerIndex = 0;
            System.out.println("ƒê√£ chia b√†i xong! Chuy·ªÉn sang PLAYER_TURN");
        }
    }
    
    // TH√äM: Ki·ªÉm tra Blackjack t·ª± nhi√™n (21 ƒëi·ªÉm v·ªõi 2 l√° ƒë·∫ßu)
    private void checkNaturalBlackjacks() {
        boolean anyPlayerHasBlackjack = false;
        boolean dealerHasBlackjack = false;
        
        // Ki·ªÉm tra dealer c√≥ blackjack kh√¥ng (c·∫ßn t√≠nh c·∫£ l√° ·∫©n)
        Card dealerHiddenCard = dealerHand.get(0);
        Card visibleCard = dealerHand.get(1);
        int dealerTotal = dealerHiddenCard.getValue() + visibleCard.getValue();
        int dealerAces = (dealerHiddenCard.isAce() ? 1 : 0) + (visibleCard.isAce() ? 1 : 0);
        dealerTotal = calculateOptimalScore(dealerTotal, dealerAces);
        
        if (dealerTotal == 21) {
            dealerHasBlackjack = true;
        }
        
        // Ki·ªÉm tra players c√≥ blackjack kh√¥ng
        for (int i = 0; i < numberOfPlayers; i++) {
            if (playersSums.get(i) == 21) {
                anyPlayerHasBlackjack = true;
                playersResults.set(i, "Blackjack!");
            }
        }
        
        // N·∫øu c√≥ Blackjack, x·ª≠ l√Ω ngay
        if (anyPlayerHasBlackjack || dealerHasBlackjack) {
            // L·∫≠t l√° ·∫©n c·ªßa dealer
            dealerSum = dealerTotal;
            dealerAceCount = dealerAces;
            
            currentGameState = GameState.GAME_OVER;
            determineBlackjackResults(dealerHasBlackjack);
        }
    }
    
    // TH√äM: X·ª≠ l√Ω k·∫øt qu·∫£ khi c√≥ Blackjack
    private void determineBlackjackResults(boolean dealerHasBlackjack) {
        for (int i = 0; i < numberOfPlayers; i++) {
            int playerSum = playersSums.get(i);
            int betAmount = playersBets.get(i);
            int currentMoney = playersMoneys.get(i);
            
            if (playerSum == 21 && dealerSum == 21) {
                // C·∫£ hai ƒë·ªÅu c√≥ Blackjack = H√≤a
                playersResults.set(i, "H√≤a!");
                playersMoneys.set(i, currentMoney + betAmount); // Ho√†n ti·ªÅn
            } else if (playerSum == 21) {
                // Ch·ªâ player c√≥ Blackjack = Th·∫Øng 3:2
                playersResults.set(i, "Blackjack!");
                playersMoneys.set(i, currentMoney + betAmount + (betAmount * 3 / 2)); // Ho√†n ti·ªÅn + th·∫Øng 1.5x
            } else if (dealerSum == 21) {
                // Ch·ªâ dealer c√≥ Blackjack = Player thua
                playersResults.set(i, "Thua!");
                // Ti·ªÅn ƒë√£ b·ªã tr·ª´ khi ƒë·∫∑t c∆∞·ª£c
            } else {
                // Kh√¥ng ai c√≥ Blackjack, ti·∫øp t·ª•c game b√¨nh th∆∞·ªùng
                playersResults.set(i, "");
            }
        }
    }

    public void playerHit() {
        if (currentGameState != GameState.PLAYER_TURN || currentPlayerIndex >= numberOfPlayers) {
            return;
        }

        Card card = deck.remove(deck.size() - 1);
        playersHands.get(currentPlayerIndex).add(card);
        
        // T√≠nh l·∫°i to√†n b·ªô ƒëi·ªÉm t·ª´ ƒë·∫ßu ƒë·ªÉ ƒë·∫£m b·∫£o ch√≠nh x√°c
        int totalSum = 0;
        int aceCount = 0;
        
        for (Card c : playersHands.get(currentPlayerIndex)) {
            totalSum += c.getValue();
            if (c.isAce()) {
                aceCount++;
            }
        }
        
        // √Åp d·ª•ng logic t√≠nh A t·ªëi ∆∞u
        int finalSum = calculateOptimalScore(totalSum, aceCount);
        
        // C·∫≠p nh·∫≠t ƒëi·ªÉm v√† s·ªë A
        playersSums.set(currentPlayerIndex, finalSum);
        playersAceCounts.set(currentPlayerIndex, aceCount);

        // Ki·ªÉm tra n·∫øu qu√° 21 ƒëi·ªÉm
        if (finalSum > 21) {
            // Player b·ªã bust - thua ngay l·∫≠p t·ª©c
            playersResults.set(currentPlayerIndex, "Thua!");
            System.out.println("Player " + currentPlayerIndex + " b·ªã bust v·ªõi " + finalSum + " ƒëi·ªÉm!");
            playerStand(); // Chuy·ªÉn l∆∞·ª£t cho ng∆∞·ªùi ti·∫øp theo
        }
    }

    public void playerStand() {
        if (currentGameState != GameState.PLAYER_TURN) {
            return;
        }

        currentPlayerIndex++;
        if (currentPlayerIndex >= numberOfPlayers) {
            // T·∫•t c·∫£ ng∆∞·ªùi ch∆°i ƒë√£ ch∆°i xong
            currentGameState = GameState.DEALER_TURN;
            dealerPlay();
        }
    }
    
    private void dealerPlay() {
        // L·∫≠t l√° ·∫©n c·ªßa dealer v√† t√≠nh l·∫°i ƒëi·ªÉm t·ª´ ƒë·∫ßu
        System.out.println("Dealer b·∫Øt ƒë·∫ßu ch∆°i...");
        
        // T√≠nh l·∫°i ƒëi·ªÉm dealer t·ª´ t·∫•t c·∫£ l√° b√†i hi·ªán c√≥
        dealerSum = 0;
        dealerAceCount = 0;
        for (Card card : dealerHand) {
            dealerSum += card.getValue();
            if (card.isAce()) {
                dealerAceCount++;
            }
        }
        dealerSum = calculateOptimalScore(dealerSum, dealerAceCount);
        
        System.out.println("ƒêi·ªÉm dealer ban ƒë·∫ßu: " + dealerSum);
        
        // Dealer r√∫t b√†i cho ƒë·∫øn khi >= 17
        while (dealerSum < 17) {
            Card card = deck.remove(deck.size() - 1);
            dealerHand.add(card);
            
            // T√≠nh l·∫°i to√†n b·ªô ƒëi·ªÉm t·ª´ ƒë·∫ßu
            dealerSum = 0;
            dealerAceCount = 0;
            for (Card c : dealerHand) {
                dealerSum += c.getValue();
                if (c.isAce()) {
                    dealerAceCount++;
                }
            }
            dealerSum = calculateOptimalScore(dealerSum, dealerAceCount);
            
            System.out.println("Dealer r√∫t " + card + ", t·ªïng ƒëi·ªÉm: " + dealerSum);
        }
        
        System.out.println("Dealer k·∫øt th√∫c v·ªõi " + dealerSum + " ƒëi·ªÉm");
        
        // K·∫øt th√∫c game v√† t√≠nh k·∫øt qu·∫£
        currentGameState = GameState.GAME_OVER;
        determineFinalResults();
    }

    private void determineFinalResults() {
        for (int i = 0; i < numberOfPlayers; i++) {
            int playerSum = playersSums.get(i);
            int betAmount = playersBets.get(i);
            int currentMoney = playersMoneys.get(i);
            
            // Ki·ªÉm tra n·∫øu player ƒë√£ b·ªã ƒë√°nh d·∫•u thua tr∆∞·ªõc ƒë√≥ (qu√° 21)
            String currentResult = playersResults.get(i);
            if (currentResult != null && currentResult.contains("Thua")) {
                // Player ƒë√£ thua t·ª´ tr∆∞·ªõc (qu√° 21), ki·ªÉm tra dealer
                if (dealerSum > 21) {
                    // C·∫£ hai ƒë·ªÅu qu√° 21 -> H√≤a
                    playersResults.set(i, "H√≤a!");
                    playersMoneys.set(i, currentMoney + betAmount); // Ho√†n ti·ªÅn c∆∞·ª£c
                }
                // N·∫øu dealer kh√¥ng qu√° 21, player v·∫´n thua (gi·ªØ nguy√™n k·∫øt qu·∫£)
                continue;
            }
            
            // X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p kh√°c
            if (playerSum > 21) {
                // Player bust (tr∆∞·ªùng h·ª£p n√†y kh√¥ng n√™n x·∫£y ra v√¨ ƒë√£ x·ª≠ l√Ω ·ªü tr√™n)
                if (dealerSum > 21) {
                    playersResults.set(i, "H√≤a!");
                    playersMoneys.set(i, currentMoney + betAmount);
                } else {
                    playersResults.set(i, "Thua!");
                }
            } else if (dealerSum > 21) {
                // Dealer bust, player th·∫Øng
                playersResults.set(i, "Th·∫Øng!");
                playersMoneys.set(i, currentMoney + betAmount * 2); // Ho√†n ti·ªÅn + th·∫Øng 1:1
            } else if (playerSum > dealerSum) {
                // Player c√≥ ƒëi·ªÉm cao h∆°n
                playersResults.set(i, "Th·∫Øng!");
                playersMoneys.set(i, currentMoney + betAmount * 2);
            } else if (playerSum == dealerSum) {
                // H√≤a
                playersResults.set(i, "H√≤a!");
                playersMoneys.set(i, currentMoney + betAmount); // Ho√†n ti·ªÅn c∆∞·ª£c
            } else {
                // Player thua
                playersResults.set(i, "Thua!");
                // Ti·ªÅn c∆∞·ª£c ƒë√£ b·ªã tr·ª´
            }
        }
    }
    
    // Getters cho h·ªá th·ªëng c∆∞·ª£c
    public List<Integer> getPlayersMoneys() { return playersMoneys; }
    public List<Integer> getPlayersBets() { return playersBets; }
    
    // C√°c ph∆∞∆°ng th·ª©c kh√°c gi·ªØ nguy√™n...
    public void buildDeck() {
        deck = new ArrayList<>();
        String[] values = {"A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"};
        String[] types = {"C", "D", "H", "S"};

        for (String type : types) {
            for (String value : values) {
                Card card = new Card(value, type);
                deck.add(card);
            }
        }
    }

    public void shuffleDeck() {
        Collections.shuffle(deck, random);
    }

    // Ph∆∞∆°ng th·ª©c t√≠nh ƒëi·ªÉm t·ªëi ∆∞u cho con A (11, 10, ho·∫∑c 1)
    private int calculateOptimalScore(int sum, int aceCount) {
        if (aceCount == 0) return sum;
        
        // N·∫øu ƒëi·ªÉm hi·ªán t·∫°i <= 21, kh√¥ng c·∫ßn ƒëi·ªÅu ch·ªânh
        if (sum <= 21) return sum;
        
        // Th·ª≠ gi·∫£m A t·ª´ 11 xu·ªëng 1 (gi·∫£m 10 ƒëi·ªÉm m·ªói l·∫ßn)
        int adjustedSum = sum;
        int acesToReduce = aceCount;
        
        while (adjustedSum > 21 && acesToReduce > 0) {
            adjustedSum -= 10; // Chuy·ªÉn A t·ª´ 11 th√†nh 1
            acesToReduce--;
        }
        
        return adjustedSum;
    }

    public int reducePlayerAce(int playerSum, int playerAceCount) {
        return calculateOptimalScore(playerSum, playerAceCount);
    }

    public int reduceDealerAce() {
        dealerSum = calculateOptimalScore(dealerSum, dealerAceCount);
        return dealerSum;
    }

    // Getters
    public List<String> getPlayersResults() { return playersResults; }
    public List<ArrayList<Card>> getPlayersHands() { return playersHands; }
    
    // Getter cho ƒëi·ªÉm ƒë√£ ƒë∆∞·ª£c t√≠nh to√°n ch√≠nh x√°c
    public List<Integer> getPlayersSums() { 
        // ƒê·∫£m b·∫£o t·∫•t c·∫£ ƒëi·ªÉm ƒë·ªÅu ƒë∆∞·ª£c t√≠nh ch√≠nh x√°c v·ªõi A
        List<Integer> correctSums = new ArrayList<>();
        for (int i = 0; i < numberOfPlayers; i++) {
            int rawSum = playersSums.get(i);
            int aceCount = playersAceCounts.get(i);
            correctSums.add(calculateOptimalScore(rawSum, aceCount));
        }
        return correctSums;
    }
    
    // Getter cho ƒëi·ªÉm c·ªßa m·ªôt player c·ª• th·ªÉ
    public int getPlayerSum(int playerIndex) {
        if (playerIndex >= 0 && playerIndex < numberOfPlayers) {
            int rawSum = playersSums.get(playerIndex);
            int aceCount = playersAceCounts.get(playerIndex);
            return calculateOptimalScore(rawSum, aceCount);
        }
        return 0;
    }
    
    public ArrayList<Card> getDealerHand() { return dealerHand; }
    
    // Getter cho ƒëi·ªÉm dealer ƒë∆∞·ª£c t√≠nh ch√≠nh x√°c
    public int getDealerSum() { 
        // T√≠nh l·∫°i ƒëi·ªÉm dealer t·ª´ t·∫•t c·∫£ l√° b√†i ƒë·ªÉ ƒë·∫£m b·∫£o ch√≠nh x√°c
        if (dealerHand == null || dealerHand.isEmpty()) return 0;
        
        int sum = 0;
        int aceCount = 0;
        for (Card card : dealerHand) {
            sum += card.getValue();
            if (card.isAce()) {
                aceCount++;
            }
        }
        
        return calculateOptimalScore(sum, aceCount);
    }
    
    public GameState getCurrentGameState() { return currentGameState; }
    public int getCurrentPlayerIndex() { return currentPlayerIndex; }
}